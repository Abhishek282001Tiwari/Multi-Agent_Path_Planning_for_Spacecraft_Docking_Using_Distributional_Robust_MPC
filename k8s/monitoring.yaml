apiVersion: v1
kind: Namespace
metadata:
  name: spacecraft-monitoring
  labels:
    name: spacecraft-monitoring
    app: monitoring
    version: v1.0.0

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: spacecraft-monitoring
  labels:
    app: prometheus
    version: v1.0.0
    component: metrics-collection
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        version: v1.0.0
        component: metrics-collection
    spec:
      serviceAccountName: prometheus-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=50GB'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
          - '--web.external-url=http://monitor.spacecraft-sim.example.com/prometheus'
        ports:
        - name: prometheus
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            storage: "20Gi"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: prometheus
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: prometheus
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 4
          failureThreshold: 3
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["prometheus"]
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: spacecraft-monitoring
  labels:
    app: grafana
    version: v1.0.0
    component: visualization
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        version: v1.0.0
        component: visualization
    spec:
      serviceAccountName: grafana-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - name: grafana
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_SERVER_ROOT_URL
          value: "http://monitor.spacecraft-sim.example.com/"
        - name: GF_DATABASE_TYPE
          value: "postgres"
        - name: GF_DATABASE_HOST
          value: "spacecraft-database.spacecraft-sim:5432"
        - name: GF_DATABASE_NAME
          value: "grafana"
        - name: GF_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: spacecraft-secrets
              key: postgres-user
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: spacecraft-secrets
              key: postgres-password
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: grafana
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 30
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: grafana
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources/
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards/
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards/
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage-pvc
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: spacecraft-monitoring
  labels:
    app: alertmanager
    version: v1.0.0
    component: alerting
spec:
  replicas: 3
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        version: v1.0.0
        component: alerting
    spec:
      serviceAccountName: alertmanager-sa
      containers:
      - name: alertmanager
        image: prom/alertmanager:latest
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager'
          - '--web.external-url=http://monitor.spacecraft-sim.example.com/alertmanager'
          - '--cluster.listen-address=0.0.0.0:9094'
          - '--cluster.advertise-address=$(POD_IP):9094'
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: alertmanager
          containerPort: 9093
          protocol: TCP
        - name: cluster
          containerPort: 9094
          protocol: TCP
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: alertmanager
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: alertmanager
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 4
          failureThreshold: 3
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager/
        - name: alertmanager-storage
          mountPath: /alertmanager/
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
      - name: alertmanager-storage
        persistentVolumeClaim:
          claimName: alertmanager-storage-pvc

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: spacecraft-monitoring
  labels:
    app: node-exporter
    version: v1.0.0
    component: node-metrics
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
        version: v1.0.0
        component: node-metrics
    spec:
      serviceAccountName: node-exporter-sa
      hostNetwork: true
      hostPID: true
      containers:
      - name: node-exporter
        image: prom/node-exporter:latest
        args:
          - '--path.procfs=/host/proc'
          - '--path.sysfs=/host/sys'
          - '--path.rootfs=/host/root'
          - '--collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)'
          - '--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$'
        ports:
        - name: metrics
          containerPort: 9100
          protocol: TCP
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          mountPropagation: HostToContainer
          readOnly: true
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /
      tolerations:
      - effect: NoSchedule
        operator: Exists

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: spacecraft-monitoring
  labels:
    app: postgres-exporter
    version: v1.0.0
    component: database-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
        version: v1.0.0
        component: database-metrics
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: spacecraft-secrets
              key: database-url
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres-exporter/queries.yaml"
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: postgres-exporter-config
          mountPath: /etc/postgres-exporter/
      volumes:
      - name: postgres-exporter-config
        configMap:
          name: postgres-exporter-config

---
# Services for monitoring components
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: spacecraft-monitoring
  labels:
    app: prometheus
    component: metrics-collection
spec:
  type: ClusterIP
  ports:
  - name: prometheus
    port: 9090
    targetPort: prometheus
    protocol: TCP
  selector:
    app: prometheus

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: spacecraft-monitoring
  labels:
    app: grafana
    component: visualization
spec:
  type: ClusterIP
  ports:
  - name: grafana
    port: 3000
    targetPort: grafana
    protocol: TCP
  selector:
    app: grafana

---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: spacecraft-monitoring
  labels:
    app: alertmanager
    component: alerting
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for clustering
  ports:
  - name: alertmanager
    port: 9093
    targetPort: alertmanager
    protocol: TCP
  - name: cluster
    port: 9094
    targetPort: cluster
    protocol: TCP
  selector:
    app: alertmanager

---
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: spacecraft-monitoring
  labels:
    app: node-exporter
    component: node-metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9100"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: metrics
    port: 9100
    targetPort: metrics
    protocol: TCP
  selector:
    app: node-exporter

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter
  namespace: spacecraft-monitoring
  labels:
    app: postgres-exporter
    component: database-metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9187
    targetPort: metrics
    protocol: TCP
  selector:
    app: postgres-exporter

---
# ConfigMaps for monitoring configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: spacecraft-monitoring
  labels:
    app: alertmanager
    component: alerting-config
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alerts@spacecraft-sim.example.com'
      smtp_auth_username: 'alerts@spacecraft-sim.example.com'
      smtp_auth_password: 'alert_email_password'
      
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'spacecraft-alerts'
      routes:
      - match:
          severity: critical
        receiver: 'spacecraft-critical'
        group_wait: 5s
        repeat_interval: 5m
      - match:
          severity: warning
        receiver: 'spacecraft-warnings'
        group_wait: 10s
        repeat_interval: 30m
    
    receivers:
    - name: 'spacecraft-alerts'
      email_configs:
      - to: 'team@spacecraft-sim.example.com'
        subject: 'Spacecraft Alert: {{ .GroupLabels.alertname }}'
        body: |
          Alert Details:
          {{ range .Alerts }}
          - Alert: {{ .Annotations.summary }}
          - Description: {{ .Annotations.description }}
          - Severity: {{ .Labels.severity }}
          - Instance: {{ .Labels.instance }}
          - Time: {{ .StartsAt }}
          {{ end }}
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/T123/B456/XXXX'
        channel: '#spacecraft-alerts'
        title: 'Spacecraft Simulation Alert'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        
    - name: 'spacecraft-critical'
      email_configs:
      - to: 'oncall@spacecraft-sim.example.com'
        subject: 'CRITICAL: Spacecraft Alert - {{ .GroupLabels.alertname }}'
        body: |
          CRITICAL ALERT
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Time: {{ .StartsAt }}
          
          This requires immediate attention!
          {{ end }}
      pagerduty_configs:
      - routing_key: 'YOUR_PAGERDUTY_INTEGRATION_KEY'
        description: '{{ .GroupLabels.alertname }} - {{ .CommonAnnotations.summary }}'
        
    - name: 'spacecraft-warnings'
      email_configs:
      - to: 'team@spacecraft-sim.example.com'
        subject: 'Warning: Spacecraft Alert - {{ .GroupLabels.alertname }}'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: spacecraft-monitoring
  labels:
    app: grafana
    component: visualization-config
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    root_url = http://monitor.spacecraft-sim.example.com/
    
    [security]
    admin_user = admin
    
    [database]
    type = postgres
    host = spacecraft-database.spacecraft-sim:5432
    name = grafana
    user = spacecraft
    password = spacecraft_password
    ssl_mode = disable
    
    [session]
    provider = postgres
    
    [auth.anonymous]
    enabled = false
    
    [auth.basic]
    enabled = true
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [metrics]
    enabled = true
    
    [tracing.jaeger]
    address = localhost:14268

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: spacecraft-monitoring
  labels:
    app: grafana
    component: datasources-config
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.spacecraft-monitoring:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: "5s"
        queryTimeout: "300s"
        httpMethod: "POST"
    - name: PostgreSQL
      type: postgres
      access: proxy
      url: spacecraft-database.spacecraft-sim:5432
      database: spacecraft_sim
      user: spacecraft
      secureJsonData:
        password: spacecraft_password
      jsonData:
        sslmode: disable
        maxOpenConns: 0
        maxIdleConns: 2
        connMaxLifetime: 14400

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: spacecraft-monitoring
  labels:
    app: grafana
    component: dashboards-config
data:
  dashboard.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-exporter-config
  namespace: spacecraft-monitoring
  labels:
    app: postgres-exporter
    component: database-metrics-config
data:
  queries.yaml: |
    spacecraft_simulations:
      query: "SELECT COUNT(*) as active_simulations FROM simulations WHERE status = 'running'"
      metrics:
        - active_simulations:
            usage: "GAUGE"
            description: "Number of active spacecraft simulations"
            
    spacecraft_agents:
      query: "SELECT simulation_id, COUNT(*) as agent_count FROM agents GROUP BY simulation_id"
      metrics:
        - agent_count:
            usage: "GAUGE"
            description: "Number of agents per simulation"
            
    performance_metrics:
      query: |
        SELECT 
          simulation_id,
          AVG(solve_time) as avg_solve_time,
          MAX(solve_time) as max_solve_time,
          AVG(position_error) as avg_position_error
        FROM simulation_metrics 
        WHERE created_at > NOW() - INTERVAL '1 hour'
        GROUP BY simulation_id
      metrics:
        - avg_solve_time:
            usage: "GAUGE"
            description: "Average solver time per simulation"
        - max_solve_time:
            usage: "GAUGE"
            description: "Maximum solver time per simulation"
        - avg_position_error:
            usage: "GAUGE"
            description: "Average position error per simulation"

---
# ServiceMonitor for Prometheus Operator
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: spacecraft-servicemonitor
  namespace: spacecraft-monitoring
  labels:
    app: spacecraft-drmpc
    component: service-monitor
spec:
  selector:
    matchLabels:
      app: spacecraft-drmpc
  namespaceSelector:
    matchNames:
    - spacecraft-sim
  endpoints:
  - port: metrics
    interval: 10s
    path: /metrics
    honorLabels: true
  - port: http
    interval: 30s
    path: /health
    honorLabels: true

---
# PodMonitor for Prometheus Operator
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: spacecraft-podmonitor
  namespace: spacecraft-monitoring
  labels:
    app: spacecraft-drmpc
    component: pod-monitor
spec:
  selector:
    matchLabels:
      app: spacecraft-drmpc
  namespaceSelector:
    matchNames:
    - spacecraft-sim
  podMetricsEndpoints:
  - port: metrics
    interval: 15s
    path: /metrics

---
# PrometheusRule for custom alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: spacecraft-alerts
  namespace: spacecraft-monitoring
  labels:
    app: spacecraft-drmpc
    component: alert-rules
spec:
  groups:
  - name: spacecraft.rules
    rules:
    - alert: SpacecraftSimulationDown
      expr: up{job="spacecraft-drmpc"} == 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Spacecraft simulation instance is down"
        description: "Spacecraft simulation instance {{ $labels.instance }} has been down for more than 5 minutes."
        
    - alert: SpacecraftHighMemoryUsage
      expr: (spacecraft_memory_usage_bytes / spacecraft_memory_limit_bytes) * 100 > 90
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "High memory usage in spacecraft simulation"
        description: "Memory usage is above 90% for simulation {{ $labels.simulation_id }}"
        
    - alert: SpacecraftSolverTimeout
      expr: spacecraft_solver_duration_seconds > 1.0
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "MPC solver timeout detected"
        description: "Solver taking longer than 1 second consistently"
        
    - alert: SpacecraftCollisionRisk
      expr: spacecraft_min_separation_meters < 5.0
      for: 30s
      labels:
        severity: critical
      annotations:
        summary: "Collision risk detected"
        description: "Spacecraft separation is below 5 meters in simulation {{ $labels.simulation_id }}"