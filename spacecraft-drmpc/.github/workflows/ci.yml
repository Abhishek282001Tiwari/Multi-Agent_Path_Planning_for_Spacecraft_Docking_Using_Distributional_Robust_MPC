name: Spacecraft Simulation CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Container registry configuration
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
  # Python configuration
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  
  # Test configuration
  TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/spacecraft_test
  TEST_REDIS_URL: redis://localhost:6379/1
  
  # Security scanning
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
  # Performance thresholds
  MAX_COVERAGE_DECREASE: 2.0
  MAX_PERFORMANCE_REGRESSION: 10.0

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarCloud
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements-dev.txt
        pip install -e .
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff src/ tests/
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff src/ tests/
    
    - name: Linting (flake8)
      run: |
        flake8 src/ tests/ --statistics --tee --output-file=flake8-report.txt
    
    - name: Type checking (mypy)
      run: |
        mypy src/ --junit-xml=mypy-report.xml
    
    - name: Security scanning (bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Dependency vulnerability scan
      if: env.SNYK_TOKEN != ''
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json > snyk-report.json
    
    - name: Upload code quality artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          mypy-report.xml
          bandit-report.json
          snyk-report.json
        retention-days: 30

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        test-type: [unit, integration, performance]
        python-version: ['3.10', '3.11']
      fail-fast: false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: spacecraft_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libatlas-base-dev \
          libblas-dev \
          liblapack-dev \
          libsuitesparse-dev \
          libglpk-dev \
          coinor-libcbc-dev \
          coinor-libclp-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-test.txt
        pip install -e .
    
    - name: Set up test environment
      run: |
        cp tests/test_config.env.example tests/test_config.env
        echo "DATABASE_URL=${{ env.TEST_DATABASE_URL }}" >> tests/test_config.env
        echo "REDIS_URL=${{ env.TEST_REDIS_URL }}" >> tests/test_config.env
    
    - name: Run database migrations
      run: |
        python -m alembic upgrade head
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
    
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --junit-xml=junit-unit.xml \
          --cov-fail-under=80 \
          -v
    
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/integration/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=junit-integration.xml \
          --tb=short \
          -v
      timeout-minutes: 30
    
    - name: Run performance tests
      if: matrix.test-type == 'performance'
      run: |
        pytest tests/performance/ \
          --junit-xml=junit-performance.xml \
          --benchmark-json=benchmark-results.json \
          --benchmark-compare-fail=mean:10% \
          -v
      timeout-minutes: 20
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-py${{ matrix.python-version }}
        path: |
          junit-*.xml
          htmlcov/
          coverage.xml
          benchmark-results.json
        retention-days: 30
    
    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        target: production
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=docker,dest=/tmp/spacecraft-image.tar
        build-args: |
          BUILD_VERSION=${{ github.ref_name }}
          BUILD_COMMIT=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Load Docker image
      run: |
        docker load --input /tmp/spacecraft-image.tar
    
    - name: Test Docker image
      run: |
        # Basic smoke test
        docker run --rm -d --name spacecraft-test \
          -e DATABASE_URL=sqlite:///tmp/test.db \
          -e REDIS_URL=redis://localhost:6379/0 \
          -e JWT_SECRET=test-secret \
          -e API_SECRET_KEY=test-api-key \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        docker ps | grep spacecraft-test
        
        # Check health endpoint (if available)
        docker exec spacecraft-test curl -f http://localhost:8080/health || true
        
        # Stop test container
        docker stop spacecraft-test
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/spacecraft-image.tar
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: /tmp/spacecraft-image.tar
        retention-days: 7

  # Kubernetes Deployment Validation
  k8s-validation:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Validate Kubernetes manifests
      run: |
        # Validate YAML syntax
        kubectl apply --dry-run=client --validate=true -f k8s/
    
    - name: Lint Kubernetes manifests
      run: |
        # Install kubeval
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo cp kubeval /usr/local/bin
        
        # Validate manifests
        kubeval k8s/*.yaml
    
    - name: Security scan for Kubernetes
      uses: azure/k8s-lint@v1
      with:
        manifests: |
          k8s/deployment.yaml
          k8s/service.yaml
          k8s/configmap.yaml
          k8s/secrets.yaml
          k8s/ingress.yaml

  # Performance Regression Testing
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: spacecraft_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-perf.txt
        pip install -e .
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/benchmarks/ \
          --benchmark-json=current-benchmark.json \
          --benchmark-compare-fail=mean:${{ env.MAX_PERFORMANCE_REGRESSION }}% \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/spacecraft_perf
        REDIS_URL: redis://localhost:6379/2
    
    - name: Download previous benchmark
      uses: actions/download-artifact@v3
      with:
        name: performance-baseline
        path: ./
      continue-on-error: true
    
    - name: Compare performance
      run: |
        if [ -f "baseline-benchmark.json" ]; then
          python scripts/compare_performance.py \
            --baseline baseline-benchmark.json \
            --current current-benchmark.json \
            --threshold ${{ env.MAX_PERFORMANCE_REGRESSION }} \
            --output performance-report.md
        else
          echo "No baseline found, creating new baseline"
          cp current-benchmark.json baseline-benchmark.json
        fi
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-baseline
        path: |
          current-benchmark.json
          baseline-benchmark.json
          performance-report.md
        retention-days: 90

  # Documentation Generation and Deployment
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-docs.txt
        pip install -e .
    
    - name: Build API documentation
      run: |
        sphinx-build -b html docs/source docs/build/html
    
    - name: Generate OpenAPI spec
      run: |
        python scripts/generate_openapi.py > docs/build/openapi.json
    
    - name: Build user manual
      run: |
        # Convert markdown to HTML if needed
        if [ -f "docs/user_manual.md" ]; then
          pandoc docs/user_manual.md -o docs/build/user_manual.html
        fi
    
    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build

  # Container Registry Push
  registry-push:
    name: Push to Registry
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [docker-build, k8s-validation]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        path: /tmp
    
    - name: Load Docker image
      run: |
        docker load --input /tmp/spacecraft-image.tar
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Push Docker image
      run: |
        # Push all tags
        for tag in ${{ steps.meta.outputs.tags }}; do
          docker push $tag
        done
    
    - name: Generate deployment manifest
      run: |
        # Update Kubernetes manifests with new image tag
        sed -i "s|image: .*spacecraft-drmpc:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/deployment.yaml
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-manifests
        path: k8s/
        retention-days: 30

  # Automated Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [registry-push, performance-benchmark, documentation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
    
    - name: Generate changelog
      run: |
        # Generate changelog since last tag
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:'- %s (%h)' > CHANGELOG.md
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Spacecraft Simulation ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/deployment-manifests
        asset_name: kubernetes-manifests.zip
        asset_content_type: application/zip

  # Notification and Reporting
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, test, docker-build, k8s-validation, registry-push]
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [ "${{ needs.code-quality.result }}" = "success" ] && \
           [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.docker-build.result }}" = "success" ] && \
           [ "${{ needs.k8s-validation.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: Notify Slack
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.status.outputs.status }}
        channel: '#spacecraft-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Update commit status
      uses: myrotvorets/set-commit-status-action@master
      if: always()
      with:
        sha: ${{ github.sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ steps.status.outputs.status }}
        context: "CI/CD Pipeline"
        description: "Overall pipeline status: ${{ steps.status.outputs.status }}"

# Workflow dispatch for manual triggers
workflow_dispatch:
  inputs:
    environment:
      description: 'Target environment'
      required: true
      default: 'staging'
      type: choice
      options:
        - staging
        - production
    skip_tests:
      description: 'Skip test execution'
      required: false
      default: false
      type: boolean