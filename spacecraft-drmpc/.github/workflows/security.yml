name: Security Scanning and Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - code
          - dependencies
          - container
          - infrastructure

env:
  # Security tools configuration
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  TRIVY_DB_REPOSITORY: 'ghcr.io/aquasecurity/trivy-db'
  
  # Compliance and security standards
  SECURITY_BASELINE_VERSION: 'v1.0.0'
  COMPLIANCE_FRAMEWORK: 'NIST-800-53'

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarCloud
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-dev.txt
        pip install -e .
    
    # Bandit Security Scanner for Python
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f sarif -o bandit-results.sarif
    
    - name: Upload Bandit SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: bandit
    
    # Semgrep Security Scanner
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/django
          p/flask
          p/numpy
        generateSarif: "1"
    
    - name: Upload Semgrep SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
        category: semgrep
    
    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-extended,security-and-quality
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"
    
    # SonarCloud Security Analysis
    - name: SonarCloud Scan
      if: env.SONAR_TOKEN != ''
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=spacecraft-drmpc
          -Dsonar.organization=spacecraft-sim
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.security.hotspots.onlyShowOpenHotspots=false
          -Dsonar.qualitygate.wait=true
    
    # Upload security reports
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-security-reports
        path: |
          bandit-report.json
          bandit-results.sarif
          semgrep.sarif
        retention-days: 30

  # Software Composition Analysis (SCA)
  sca-analysis:
    name: Software Composition Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    # Snyk Vulnerability Scanning
    - name: Run Snyk to check for vulnerabilities
      if: env.SNYK_TOKEN != ''
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: >-
          --severity-threshold=medium
          --json
          --sarif-file-output=snyk-results.sarif
    
    - name: Upload Snyk SARIF results
      if: env.SNYK_TOKEN != ''
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk-results.sarif
        category: snyk
    
    # Safety - Python Dependency Vulnerability Scanner
    - name: Install Safety
      run: pip install safety
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
    
    # pip-audit - Official Python Package Vulnerability Scanner
    - name: Install pip-audit
      run: pip install pip-audit
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=sarif --output=pip-audit-results.sarif || true
    
    - name: Upload pip-audit SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: pip-audit-results.sarif
        category: pip-audit
    
    # License Compliance Check
    - name: Install pip-licenses
      run: pip install pip-licenses
    
    - name: Check license compliance
      run: |
        pip-licenses --format=json --output-file=licenses-report.json
        pip-licenses --format=plain --output-file=licenses-report.txt
        
        # Check for problematic licenses
        python -c "
        import json
        with open('licenses-report.json') as f:
            licenses = json.load(f)
        
        prohibited = ['GPL-2.0', 'GPL-3.0', 'AGPL-3.0']
        violations = []
        
        for pkg in licenses:
            if pkg['License'] in prohibited:
                violations.append(f\"{pkg['Name']}: {pkg['License']}\")
        
        if violations:
            print('License violations found:')
            for v in violations:
                print(f'  {v}')
            exit(1)
        else:
            print('No license violations found')
        "
    
    # Upload SCA reports
    - name: Upload SCA artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sca-security-reports
        path: |
          snyk-results.sarif
          safety-report.json
          safety-report.txt
          pip-audit-report.json
          pip-audit-results.sarif
          licenses-report.json
          licenses-report.txt
        retention-days: 30

  # Container Security Scanning
  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == ''
    
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        target: production
        tags: spacecraft-scan:latest
        outputs: type=docker,dest=/tmp/spacecraft-image.tar
        build-args: |
          BUILD_VERSION=scan
          BUILD_COMMIT=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Load Docker image
      run: docker load --input /tmp/spacecraft-image.tar
    
    # Trivy Container Vulnerability Scanner
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'spacecraft-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        vuln-type: 'os,library'
        exit-code: '0'  # Don't fail the job
    
    - name: Upload Trivy SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-results.sarif
        category: trivy
    
    # Trivy Configuration Scanning
    - name: Run Trivy config scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        severity: 'HIGH,CRITICAL'
        exit-code: '0'
    
    - name: Upload Trivy Config SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-config-results.sarif
        category: trivy-config
    
    # Docker Scout (if available)
    - name: Docker Scout CVE Analysis
      if: env.DOCKER_SCOUT_TOKEN != ''
      uses: docker/scout-action@v1
      with:
        command: cves
        image: spacecraft-scan:latest
        sarif-file: scout-results.sarif
        token: ${{ secrets.DOCKER_SCOUT_TOKEN }}
    
    - name: Upload Docker Scout SARIF results
      if: env.DOCKER_SCOUT_TOKEN != ''
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: scout-results.sarif
        category: docker-scout
    
    # Container Hardening Check
    - name: Container hardening assessment
      run: |
        # Check for common security issues in Dockerfile
        echo "Analyzing Dockerfile security..."
        
        # Check if running as root
        if grep -q "USER root" Dockerfile.prod; then
          echo "WARNING: Container runs as root"
        fi
        
        # Check for hardcoded secrets
        if grep -i -E "(password|secret|key|token)" Dockerfile.prod; then
          echo "WARNING: Potential hardcoded secrets found"
        fi
        
        # Check for security best practices
        if ! grep -q "USER " Dockerfile.prod; then
          echo "WARNING: No USER directive found"
        fi
        
        if ! grep -q "HEALTHCHECK" Dockerfile.prod; then
          echo "INFO: No HEALTHCHECK directive found"
        fi
        
        echo "Container security analysis completed"
    
    # Upload container security reports
    - name: Upload container security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-reports
        path: |
          trivy-results.sarif
          trivy-config-results.sarif
          scout-results.sarif
        retention-days: 30

  # Infrastructure as Code Security
  infrastructure-security:
    name: Infrastructure Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'infrastructure' || github.event.inputs.scan_type == ''
    
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Kubernetes Security Scanning with kube-score
    - name: Install kube-score
      run: |
        wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
        tar -xzf kube-score_1.16.1_linux_amd64.tar.gz
        sudo mv kube-score /usr/local/bin/
    
    - name: Scan Kubernetes manifests
      run: |
        echo "Scanning Kubernetes manifests for security issues..."
        kube-score score k8s/*.yaml --output-format json > kube-score-report.json || true
        kube-score score k8s/*.yaml > kube-score-report.txt || true
    
    # Checkov - Infrastructure Security Scanner
    - name: Install Checkov
      run: pip3 install checkov
    
    - name: Run Checkov scan
      run: |
        checkov -d k8s/ --framework kubernetes --output sarif --output-file checkov-k8s-results.sarif || true
        checkov -f docker-compose.prod.yml --framework docker_compose --output sarif --output-file checkov-docker-results.sarif || true
        checkov -f Dockerfile.prod --framework dockerfile --output sarif --output-file checkov-dockerfile-results.sarif || true
    
    - name: Upload Checkov SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-k8s-results.sarif
        category: checkov-k8s
    
    - name: Upload Checkov Docker SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-docker-results.sarif
        category: checkov-docker
    
    # Kubernetes Network Policy Validation
    - name: Validate network policies
      run: |
        echo "Validating Kubernetes Network Policies..."
        
        # Check if network policies exist
        if ls k8s/*network*.yaml 1> /dev/null 2>&1; then
          echo "Network policies found"
          
          # Basic validation
          kubectl apply --dry-run=client --validate=true -f k8s/*network*.yaml
        else
          echo "WARNING: No network policies found"
        fi
    
    # Secrets Management Validation
    - name: Validate secrets management
      run: |
        echo "Validating secrets management..."
        
        # Check for hardcoded secrets in K8s manifests
        if grep -r -i -E "(password|secret|key|token):" k8s/ --include="*.yaml" | grep -v "secretKeyRef"; then
          echo "WARNING: Potential hardcoded secrets found in Kubernetes manifests"
        else
          echo "Secrets management validation passed"
        fi
        
        # Check for proper secret references
        if grep -r "secretKeyRef" k8s/ --include="*.yaml"; then
          echo "INFO: Secret references found (good practice)"
        fi
    
    # RBAC Analysis
    - name: RBAC security analysis
      run: |
        echo "Analyzing RBAC configurations..."
        
        # Check for overly permissive RBAC
        if grep -r "resources: \[\"*\"\]" k8s/ --include="*.yaml"; then
          echo "WARNING: Wildcard permissions found in RBAC"
        fi
        
        if grep -r "verbs: \[\"*\"\]" k8s/ --include="*.yaml"; then
          echo "WARNING: Wildcard verbs found in RBAC"
        fi
        
        echo "RBAC analysis completed"
    
    # Upload infrastructure security reports
    - name: Upload infrastructure security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: infrastructure-security-reports
        path: |
          kube-score-report.json
          kube-score-report.txt
          checkov-k8s-results.sarif
          checkov-docker-results.sarif
          checkov-dockerfile-results.sarif
        retention-days: 30

  # Security Compliance Check
  compliance-check:
    name: Security Compliance Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [sast-analysis, sca-analysis, container-security, infrastructure-security]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all security reports
      uses: actions/download-artifact@v3
      with:
        path: ./security-reports
    
    - name: Security compliance assessment
      run: |
        echo "Performing security compliance assessment..."
        
        # Create compliance report
        cat > compliance-report.md << EOF
        # Security Compliance Report
        
        **Date**: $(date)
        **Commit**: ${{ github.sha }}
        **Framework**: ${{ env.COMPLIANCE_FRAMEWORK }}
        
        ## Assessment Results
        
        | Security Domain | Status | Issues Found |
        |-----------------|--------|--------------|
        EOF
        
        # Check each security domain
        TOTAL_ISSUES=0
        
        # SAST Analysis
        if [ -d "security-reports/sast-security-reports" ]; then
          SAST_ISSUES=$(find security-reports/sast-security-reports -name "*.json" -exec cat {} \; | jq -r '.results | length' 2>/dev/null || echo "0")
          echo "| Static Analysis (SAST) | ✅ Complete | $SAST_ISSUES |" >> compliance-report.md
          TOTAL_ISSUES=$((TOTAL_ISSUES + SAST_ISSUES))
        else
          echo "| Static Analysis (SAST) | ❌ Failed | N/A |" >> compliance-report.md
        fi
        
        # SCA Analysis
        if [ -d "security-reports/sca-security-reports" ]; then
          echo "| Composition Analysis (SCA) | ✅ Complete | Check artifacts |" >> compliance-report.md
        else
          echo "| Composition Analysis (SCA) | ❌ Failed | N/A |" >> compliance-report.md
        fi
        
        # Container Security
        if [ -d "security-reports/container-security-reports" ]; then
          echo "| Container Security | ✅ Complete | Check artifacts |" >> compliance-report.md
        else
          echo "| Container Security | ❌ Failed | N/A |" >> compliance-report.md
        fi
        
        # Infrastructure Security
        if [ -d "security-reports/infrastructure-security-reports" ]; then
          echo "| Infrastructure Security | ✅ Complete | Check artifacts |" >> compliance-report.md
        else
          echo "| Infrastructure Security | ❌ Failed | N/A |" >> compliance-report.md
        fi
        
        # Compliance summary
        cat >> compliance-report.md << EOF
        
        ## Compliance Summary
        
        - **Total Security Issues**: $TOTAL_ISSUES
        - **Critical Issues**: 0 (manual review required)
        - **Compliance Status**: $([ $TOTAL_ISSUES -lt 10 ] && echo "PASS" || echo "REVIEW REQUIRED")
        
        ## Recommendations
        
        1. Review all identified security issues
        2. Implement security fixes for critical and high severity issues
        3. Update security baselines and policies
        4. Schedule regular security assessments
        
        EOF
        
        echo "Compliance assessment completed"
        cat compliance-report.md
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: security-compliance-report
        path: compliance-report.md
        retention-days: 90

  # Security notification and reporting
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [sast-analysis, sca-analysis, container-security, infrastructure-security, compliance-check]
    
    steps:
    - name: Determine security status
      id: status
      run: |
        # Collect job results
        SAST_STATUS="${{ needs.sast-analysis.result }}"
        SCA_STATUS="${{ needs.sca-analysis.result }}"
        CONTAINER_STATUS="${{ needs.container-security.result }}"
        INFRA_STATUS="${{ needs.infrastructure-security.result }}"
        COMPLIANCE_STATUS="${{ needs.compliance-check.result }}"
        
        if [[ "$SAST_STATUS" == "success" && "$SCA_STATUS" == "success" && 
              "$CONTAINER_STATUS" == "success" && "$INFRA_STATUS" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All security scans completed successfully" >> $GITHUB_OUTPUT
        else
          echo "status=warning" >> $GITHUB_OUTPUT
          echo "message=Some security scans failed or found issues" >> $GITHUB_OUTPUT
        fi
    
    - name: Send security notification
      if: env.SECURITY_SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "🔒 Security Scan Results for Spacecraft Simulation",
            "attachments": [
              {
                "color": "${{ steps.status.outputs.status == 'success' && 'good' || 'warning' }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "SAST Analysis",
                    "value": "${{ needs.sast-analysis.result }}",
                    "short": true
                  },
                  {
                    "title": "SCA Analysis",
                    "value": "${{ needs.sca-analysis.result }}",
                    "short": true
                  },
                  {
                    "title": "Container Security",
                    "value": "${{ needs.container-security.result }}",
                    "short": true
                  },
                  {
                    "title": "Infrastructure Security",
                    "value": "${{ needs.infrastructure-security.result }}",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions Security Pipeline",
                "ts": "${{ github.event.head_commit.timestamp }}"
              }
            ]
          }
        webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
      env:
        SECURITY_SLACK_WEBHOOK: ${{ secrets.SECURITY_SLACK_WEBHOOK }}