version: '3.8'

services:
  # Main Spacecraft Application - Production Configuration
  spacecraft-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
      args:
        - BUILD_VERSION=${BUILD_VERSION:-v1.0.0}
        - BUILD_COMMIT=${BUILD_COMMIT:-unknown}
        - BUILD_DATE=${BUILD_DATE}
    image: ${DOCKER_REGISTRY:-registry.example.com}/spacecraft-drmpc:${IMAGE_TAG:-latest}
    container_name: spacecraft-drmpc-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
          pids: 1000
        reservations:
          cpus: '2.0'
          memory: 4G
    
    # Health Check Configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Environment Configuration
    environment:
      - NODE_ENV=production
      - APP_ENV=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      
      # Database Configuration
      - DATABASE_URL=postgresql://spacecraft:${POSTGRES_PASSWORD}@spacecraft-database:5432/spacecraft_sim
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=10
      - DB_POOL_TIMEOUT=30
      
      # Redis Configuration
      - REDIS_URL=redis://spacecraft-redis:6379/0
      - REDIS_TIMEOUT=5
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # External Services
      - MOSEK_LICENSE_SERVER=${MOSEK_LICENSE_SERVER:-mosek-license:3516}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      
      # Application Configuration
      - MAX_AGENTS=20
      - DEFAULT_SOLVER=MOSEK
      - SOLVER_TIMEOUT=10.0
      - PREDICTION_HORIZON=20
    
    # Networking
    ports:
      - "8080:8080"  # HTTP API
      - "9090:9090"  # gRPC API
      - "8081:8081"  # Metrics
    
    # Volume Mounts
    volumes:
      - spacecraft_data:/app/data
      - spacecraft_logs:/app/logs
      - spacecraft_results:/app/results
      - spacecraft_config:/app/config:ro
      - mosek_license:/opt/mosek/licenses:ro
    
    # Dependencies
    depends_on:
      spacecraft-database:
        condition: service_healthy
      spacecraft-redis:
        condition: service_healthy
      spacecraft-migration:
        condition: service_completed_successfully
    
    # Network Configuration
    networks:
      - spacecraft-network
      - monitoring-network
    
    # Security Context
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:size=1G,mode=1777
      - /app/tmp:size=500M,mode=0755
    
    # Process Management
    init: true
    stop_grace_period: 30s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        compress: "true"
        labels: "service,version,environment"
    
    # Labels
    labels:
      - "service=spacecraft-drmpc"
      - "version=${BUILD_VERSION:-v1.0.0}"
      - "environment=production"
      - "component=simulation"

  # Database Service - PostgreSQL with Replication
  spacecraft-database:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile.prod
    image: ${DOCKER_REGISTRY:-registry.example.com}/spacecraft-postgres:${POSTGRES_VERSION:-15}
    container_name: spacecraft-postgres-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Health Check Configuration
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spacecraft -d spacecraft_sim"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Environment Configuration
    environment:
      - POSTGRES_DB=spacecraft_sim
      - POSTGRES_USER=spacecraft
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5 --auth-local=trust
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      
      # Replication Configuration
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRES_WAL_LEVEL=replica
      - POSTGRES_MAX_WAL_SENDERS=10
    
    # Networking
    ports:
      - "5432:5432"
    
    # Volume Mounts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - postgres_archive:/var/lib/postgresql/archive
      - ./docker/postgres/initdb:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/conf/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    
    # Network Configuration
    networks:
      - spacecraft-network
      - monitoring-network
    
    # Security Context
    user: "999:999"
    
    # Process Management
    stop_grace_period: 60s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        compress: "true"
    
    # Labels
    labels:
      - "service=spacecraft-database"
      - "version=${POSTGRES_VERSION:-15}"
      - "environment=production"
      - "component=database"

  # Database Replica Service
  spacecraft-database-replica:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile.prod
    image: ${DOCKER_REGISTRY:-registry.example.com}/spacecraft-postgres:${POSTGRES_VERSION:-15}
    container_name: spacecraft-postgres-replica-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health Check Configuration
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spacecraft -d spacecraft_sim"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 60s
    
    # Environment Configuration
    environment:
      - POSTGRES_DB=spacecraft_sim
      - POSTGRES_USER=spacecraft
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
      
      # Replication Configuration
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRES_MASTER_SERVICE=spacecraft-database
      - POSTGRES_MASTER_PORT=5432
    
    # Networking
    ports:
      - "5433:5432"
    
    # Volume Mounts
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./docker/postgres/conf/postgresql-replica.conf:/etc/postgresql/postgresql.conf:ro
    
    # Dependencies
    depends_on:
      spacecraft-database:
        condition: service_healthy
    
    # Network Configuration
    networks:
      - spacecraft-network
      - monitoring-network
    
    # Security Context
    user: "999:999"
    
    # Process Management
    stop_grace_period: 30s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        compress: "true"
    
    # Labels
    labels:
      - "service=spacecraft-database-replica"
      - "version=${POSTGRES_VERSION:-15}"
      - "environment=production"
      - "component=database"

  # Redis Cache Service
  spacecraft-redis:
    image: redis:7-alpine
    container_name: spacecraft-redis-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health Check Configuration
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    
    # Configuration
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --tcp-keepalive 60
      --timeout 300
    
    # Networking
    ports:
      - "6379:6379"
    
    # Volume Mounts
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    
    # Network Configuration
    networks:
      - spacecraft-network
      - monitoring-network
    
    # Security Context
    user: "999:999"
    
    # Process Management
    stop_grace_period: 10s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"
        compress: "true"
    
    # Labels
    labels:
      - "service=spacecraft-redis"
      - "version=7-alpine"
      - "environment=production"
      - "component=cache"

  # Database Migration Service
  spacecraft-migration:
    build:
      context: .
      dockerfile: Dockerfile.migration
      target: migration
    image: ${DOCKER_REGISTRY:-registry.example.com}/spacecraft-migration:${IMAGE_TAG:-latest}
    container_name: spacecraft-migration-prod
    
    # Environment Configuration
    environment:
      - DATABASE_URL=postgresql://spacecraft:${POSTGRES_PASSWORD}@spacecraft-database:5432/spacecraft_sim
      - MIGRATION_MODE=production
      - LOG_LEVEL=INFO
    
    # Dependencies
    depends_on:
      spacecraft-database:
        condition: service_healthy
    
    # Network Configuration
    networks:
      - spacecraft-network
    
    # Security Context
    user: "1000:1000"
    read_only: true
    
    # Process Management
    restart: "no"
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    
    # Labels
    labels:
      - "service=spacecraft-migration"
      - "version=${BUILD_VERSION:-v1.0.0}"
      - "environment=production"
      - "component=migration"

  # NGINX Reverse Proxy
  spacecraft-nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile.prod
    image: ${DOCKER_REGISTRY:-registry.example.com}/spacecraft-nginx:${NGINX_VERSION:-alpine}
    container_name: spacecraft-nginx-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Health Check Configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Networking
    ports:
      - "80:80"
      - "443:443"
    
    # Volume Mounts
    volumes:
      - ./docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf/spacecraft.conf:/etc/nginx/conf.d/spacecraft.conf:ro
      - spacecraft_static:/usr/share/nginx/html/static:ro
      - ssl_certificates:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    
    # Dependencies
    depends_on:
      spacecraft-app:
        condition: service_healthy
    
    # Network Configuration
    networks:
      - spacecraft-network
      - monitoring-network
    
    # Security Context
    user: "101:101"
    
    # Process Management
    stop_grace_period: 10s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        compress: "true"
    
    # Labels
    labels:
      - "service=spacecraft-nginx"
      - "version=${NGINX_VERSION:-alpine}"
      - "environment=production"
      - "component=proxy"

  # Prometheus Monitoring
  spacecraft-prometheus:
    image: prom/prometheus:latest
    container_name: spacecraft-prometheus-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Health Check Configuration
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    # Networking
    ports:
      - "9090:9090"
    
    # Volume Mounts
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
    
    # Network Configuration
    networks:
      - monitoring-network
    
    # Security Context
    user: "65534:65534"
    
    # Process Management
    stop_grace_period: 30s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        compress: "true"
    
    # Labels
    labels:
      - "service=spacecraft-prometheus"
      - "version=latest"
      - "environment=production"
      - "component=monitoring"

  # Grafana Visualization
  spacecraft-grafana:
    image: grafana/grafana:latest
    container_name: spacecraft-grafana-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health Check Configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Environment Configuration
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=spacecraft-database:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=spacecraft
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
      - GF_SERVER_ROOT_URL=https://monitor.spacecraft-sim.example.com
    
    # Networking
    ports:
      - "3000:3000"
    
    # Volume Mounts
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    
    # Dependencies
    depends_on:
      spacecraft-prometheus:
        condition: service_healthy
      spacecraft-database:
        condition: service_healthy
    
    # Network Configuration
    networks:
      - monitoring-network
      - spacecraft-network
    
    # Security Context
    user: "472:472"
    
    # Process Management
    stop_grace_period: 30s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        compress: "true"
    
    # Labels
    labels:
      - "service=spacecraft-grafana"
      - "version=latest"
      - "environment=production"
      - "component=visualization"

  # Log Aggregation Service
  spacecraft-logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: spacecraft-logstash-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health Check Configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Environment Configuration
    environment:
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
      - PIPELINE_WORKERS=2
      - LOG_LEVEL=warn
    
    # Networking
    ports:
      - "5044:5044"  # Beats input
      - "9600:9600"  # HTTP API
    
    # Volume Mounts
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - logstash_data:/usr/share/logstash/data
    
    # Network Configuration
    networks:
      - monitoring-network
    
    # Security Context
    user: "1000:1000"
    
    # Process Management
    stop_grace_period: 30s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        compress: "true"
    
    # Labels
    labels:
      - "service=spacecraft-logstash"
      - "version=8.10.0"
      - "environment=production"
      - "component=logging"

  # Backup Service
  spacecraft-backup:
    build:
      context: ./docker/backup
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY:-registry.example.com}/spacecraft-backup:${IMAGE_TAG:-latest}
    container_name: spacecraft-backup-prod
    restart: unless-stopped
    
    # Resource Management
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    
    # Environment Configuration
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - DATABASE_URL=postgresql://spacecraft:${POSTGRES_PASSWORD}@spacecraft-database:5432/spacecraft_sim
      - S3_BUCKET=${S3_BACKUP_BUCKET:-spacecraft-sim-backups}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - BACKUP_RETENTION_DAYS=30
      - ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    
    # Volume Mounts
    volumes:
      - backup_data:/backups
      - postgres_data:/var/lib/postgresql/data:ro
      - spacecraft_data:/app/data:ro
    
    # Dependencies
    depends_on:
      spacecraft-database:
        condition: service_healthy
    
    # Network Configuration
    networks:
      - spacecraft-network
    
    # Security Context
    user: "1000:1000"
    
    # Process Management
    stop_grace_period: 60s
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        compress: "true"
    
    # Labels
    labels:
      - "service=spacecraft-backup"
      - "version=${BUILD_VERSION:-v1.0.0}"
      - "environment=production"
      - "component=backup"

# Named Volumes for Persistent Data
volumes:
  # Application Data
  spacecraft_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/spacecraft/data}
  
  spacecraft_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-/opt/spacecraft/logs}
  
  spacecraft_results:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${RESULTS_PATH:-/opt/spacecraft/results}
  
  spacecraft_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CONFIG_PATH:-/opt/spacecraft/config}
  
  spacecraft_static:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${STATIC_PATH:-/opt/spacecraft/static}
  
  # Database Volumes
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-/opt/spacecraft/postgres/data}
  
  postgres_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_REPLICA_DATA_PATH:-/opt/spacecraft/postgres/replica}
  
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_BACKUPS_PATH:-/opt/spacecraft/postgres/backups}
  
  postgres_archive:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_ARCHIVE_PATH:-/opt/spacecraft/postgres/archive}
  
  # Cache Volume
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-/opt/spacecraft/redis}
  
  # Monitoring Volumes
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PROMETHEUS_DATA_PATH:-/opt/spacecraft/prometheus}
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${GRAFANA_DATA_PATH:-/opt/spacecraft/grafana}
  
  logstash_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGSTASH_DATA_PATH:-/opt/spacecraft/logstash}
  
  # Security Volumes
  ssl_certificates:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SSL_CERTS_PATH:-/opt/spacecraft/ssl}
  
  mosek_license:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MOSEK_LICENSE_PATH:-/opt/spacecraft/licenses}
  
  # Logging Volumes
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NGINX_LOGS_PATH:-/opt/spacecraft/nginx/logs}
  
  # Backup Volume
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_DATA_PATH:-/opt/spacecraft/backups}

# Network Configuration
networks:
  spacecraft-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: spacecraft-br0
      com.docker.network.driver.mtu: 1500
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "network=spacecraft-internal"
      - "environment=production"
  
  monitoring-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: monitoring-br0
      com.docker.network.driver.mtu: 1500
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    labels:
      - "network=monitoring"
      - "environment=production"

# Global Configuration
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "3"
    compress: "true"

x-restart-policy: &default-restart-policy
  restart_policy:
    condition: on-failure
    delay: 10s
    max_attempts: 5
    window: 120s